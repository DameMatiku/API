#%RAML 1.0
title: DámeMatiku
version: v1
baseUri: http://api.damematiku.cz/{version}

securitySchemes:
  oauth_2_0:
    description: |
        Dropbox supports OAuth 2.0 for authenticating all API requests.
    type: OAuth 2.0
    describedBy:
        headers:
            Authorization:
                description: |
                   Used to send a valid OAuth 2 access token. Do not use
                   with the "access_token" query string parameter.
                type: string
        queryParameters:
            access_token:
                description: |
                   Used to send a valid OAuth 2 access token. Do not use together with
                   the "Authorization" header
                type: string
        responses:
            401:
                description: |
                    Bad or expired token. This can happen if the user or the site
                    revoked or expired an access token. To fix, you should re-
                    authenticate the user.
            403:
                description: |
                    Bad OAuth request (wrong consumer key, bad nonce, expired
                    timestamp...). Unfortunately, re-authenticating the user won't help here.
    settings:
      accessTokenUri: https://api.damematiku.cz/{version}/oauth2/token
      authorizationGrants: [ token ]

/oauth2/token:
  get:
    queryParameters:
      grant_type:
        type: string
      google_id_token:
        type: string
    responses:
      200:
        description: Authention went OK
        body:
          application/json:
            example: |
              {
                access_token: "asdlkjadlůkajsdůkahsjdnaksdjasldkjasdlaskjdals",
                expires: 213556
              }
      400:
        description: Authenticatin failed

/tags:
  get:
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id": "zs",
                  "title": "ZS",
                  "subtags": []
                }
              ]

/search:
  get:
    queryParameters:
      q:
        description: Search query
        type: string
        required: true
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "type": "section",
                  "id": 12,
                  "title": "Section 1",
                  "chapters": [
                    {
                      "id": 124,
                      "title": "Some chapter"
                    }
                  ]
                },
                {
                  "type": "chapter",
                  "id": 123,
                  "title": "Chapter about 'search query'"
                }
              ]

/subjects/{subjectId}/sections:
  get:
    queryParameters:
      tags:
        description: Selected tags to filter by
        type: array
        required: false
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id": 12,
                  "title": "Section 1",
                  "chapters": [
                    {
                      "id": 124,
                      "title": "Some chapter"
                    }
                  ]
                }
              ]
/chapters/{chapterId}:
  get:
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "id": 123,
                "title": "Some chapter",
                "description": "HTML description.",
                "videos": [
                  {
                    "id": 153,
                    "title": "Some chapter",
                    "author": {
                      "id": 1325,
                      "name": "Lord Voldemort",
                      "reputation": 10000,
                      "avatarUrl": "http://someurl.com/img.png"
                    },
                    "youtubeId": "13kbnrfv01",
                    "votes": -3,
                    "myVote": "up"
                  }
                ],
                "sponsor": {
                  "name": "Some company",
                  "logoUrl": "http://someurl.com/logo.png",
                  "link": "http://someurl.com"
                },
                "nextChapter": {
                  "id": 124,
                  "title": "Another chapter"
                },
                "previousChapter": {
                  "id": 125,
                  "title": "Some another chapter"
                }
              }
  post:

/videos:
  /featured:
    get:
      responses:
        200:
          body:
            application/json:
              example: |
                [
                  {
                    "id": 153,
                    "title": "Some chapter",
                    "author": {
                      "id": 1325,
                      "name": "Lord Voldemort",
                      "reputation": 10000,
                      "avatarUrl": "http://someurl.com/img.png"
                    },
                    "youtubeId": "13kbnrfv01",
                    "votes": -3,
                    "myVote": "up"
                  }
                ]
  /{videoId}:
    get:
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": 153,
                  "title": "Some chapter",
                  "author": {
                    "id": 1325,
                    "name": "Lord Voldemort",
                    "reputation": 10000,
                    "avatarUrl": "http://someurl.com/img.png"
                  },
                  "youtubeId": "13kbnrfv01",
                  "votes": -3,
                  "myVote": "up",
                  "description": "HTML description.",
                  "disqusPageId": "12141"
                }

    /upvote:
      post:
        responses:
          200:
          401:
          403:
    /downvote:
      post:
        responses:
          200:
          401:
          403:

/authors/{authorId}:
  get:
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "id": 1325,
                "name": "Lord Voldemort",
                "reputation": 10000,
                "avatarUrl": "http://someurl.com/img.png",
                "videos": [
                  {
                    "id": 153,
                    "title": "Some chapter",
                    "youtubeId": "13kbnrfv01",
                    "votes": -3,
                    "myVote": "up"
                  }
                ]
              }
  /follow:
    post:
      responses:
        200:
        401:
        403:
  /unfollow:
    post:
      responses:
        200:
        401:
        403:

/users:
  /create-account-google-auth:
    post:
      queryParameters:
        client_id:
        client_secret:
      body:
        application/x-www-form-urlencoded:
          properties:
            device_id:
            googleIdToken:
              type: string
              description: A valid Google ID token.
            userType:
              description: "'student', 'teacher' or 'other'"
              type: string
